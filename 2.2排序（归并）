对于一个int数组，请编写一个归并排序算法，对数组元素排序。
给定一个int数组A及数组的大小n，请返回排序后的数组。
测试样例：
[1,2,3,5,2,3],6
[1,2,2,3,3,5]

import java.util.*;

public class MergeSort {
    public int[] mergeSort(int[] A, int n) {
        // write code here
        if (n < 2)
            return A;
        return sort(A, 0, n);
    }
    
    public int[] sort(int[] A, int left, int right) {//right是最右边+1
        if ((right - left) == 1)
            return A;
        int middle = left + (right - left) / 2;
        sort(A, left, middle);//对左数组排序
        sort(A, middle, right);//对右数组排序
        return merge(A, left, right, middle);//合并两个已经排好序的数组
    }
    
    public int[] merge(int[] A, int left, int right, int middle) {
        //两个数组下标分别是[left, middle-1][middle, right-1]
        int i = left;
        while(i <middle) {//依次比较左数组和右数组第一个元素的大小，要是大，交换，并且调整右数组
            if (A[i] > A[middle]) {//middle一直指向右数组的第一个值，也就是最小值
                int tmp = A[i];
                A[i] = A[middle];
                A[middle] = tmp;
                adjust(A, middle, right);
            }
            i++;
        }
        return A;
    }
    
    public int[] adjust(int[] A, int left, int right) {//类似于插入排序的过程，每次交换回来，只有第一个数会破坏，有序性，其余的缓释有序的，调整下
        if ((right - left) == 1)
            return A;
        int tmp = A[left];
        int i = left + 1;
        while(i < right) {
            if (tmp > A[i]) {
                A[i - 1] = A[i];
                i++;
                if (i == right) {
                    A[i - 1] = tmp;
                    return A;
                }
            } else {
                A[i - 1] = tmp;
                return A;
            }           
        } 
        return A;        
    }
}
