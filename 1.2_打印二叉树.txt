有一棵二叉树，请设计一个算法，按照层次打印这棵二叉树。
给定二叉树的根结点root，请返回打印结果，结果按照每一层一个数组进行储存，所有数组的顺序按照层数从上往下，且每一层的数组内元素按照从左往右排列。保证结点数小于等于500。

import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/
public class TreePrinter {
    public int[][] printTree(TreeNode root) {
        // write code here
        if (root == null) {//还是首先想特殊case，比较不容易忘记
            return null;
        }
        //int[][] result = new int[9][50];不能这样设数组
        TreeNode last = root;
        TreeNode nlast = root;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<List<Integer>> lists = new LinkedList<List<Integer>>();
        List<Integer> list = new LinkedList<Integer>();
        queue.add(root);
        while (queue.isEmpty() != true) {
            TreeNode temp = queue.remove();
            list.add(temp.val);
            if (temp.left != null) {
                queue.add(temp.left);
                nlast = temp.left;
            }
            if (temp.right != null) {
                queue.add(temp.right);
                nlast = temp.right;
            }
            if (temp == last) {
                lists.add(list);
                list = new LinkedList<Integer>();
                last = nlast;
            }
        }
        
        int n = lists.size();
        int[][] result = new int[n][];
        for (int i=0; i<n; i++) {
            int m = lists.get(i).size();
            result[i] = new int[m];
            for (int j=0; j<m; j++) {
                result[i][j] = lists.get(i).get(j);
            }
            
        }
        return result;
    }
}
