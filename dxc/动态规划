12.2 找零钱练习题
有数组penny，penny中所有的值都为正数且不重复。每个值代表一种面值的货币，每种面值的货币可以使用任意张，再给定一个整数aim(小于等于1000)代表要找的钱数，求换钱有多少种方法。
给定数组penny及它的大小(小于等于50)，同时给定一个整数aim，请返回有多少种方法可以凑成aim。
测试样例：
[1,2,4],3,3
返回：2

import java.util.*;

public class Exchange {
    public int countWays(int[] penny, int n, int aim) {
        // write code here
        if (penny.length != n || n < 0) {
            return -1;
        }
        int[][] dp = new int[n][];
        for (int i=0; i<dp.length; i++) {
            dp[i] = new int[aim+1];//错误1
            for (int j=0; j<dp[i].length; j++) {
                dp[i][j] = -1;
            }
        }
        int result = countWays(dp, penny, n-1, aim);
        return result;
    }
    
    public int countWays(int[][] dp, int[] penny, int i, int j) {
        if (dp[i][j] != -1) {//备忘录
            return dp[i][j];
        }
        if (i == 0) {//表示用第0张，凑j
           if (j % penny[i] == 0) {
               return 1;
           } else {
               return 0;
           }
        }
        if (j < 0) {//要好好分析下，这两个参数是怎么来的，i<-i-1，很好分析，j<-j-penny,大于的话，继续，等于的话正好第i张可以凑一下，小于的话，肯定就不对了，返回0
            return 0;
        }
        if (j == 0) {//
            return 1;
        }
        int sum = 0;
        int k = j;
        while (k >= 0) {
            sum = sum + countWays(dp, penny, i - 1, k);
            k = k - penny[i];
        }
        dp[i][j] = sum;
        return sum;
    }
}


 12.4 台阶问题练习题
 有n级台阶，一个人每次上一级或者两级，问有多少种走完n级台阶的方法。为了防止溢出，请将结果Mod 1000000007
给定一个正整数int n，请返回一个数，代表上楼的方式数。保证n小于等于100000。
测试样例：
1
返回：1

import java.util.*;

public class GoUpstairs {
    public int countWays(int n) {//10万次的递归深度肯定是栈溢出了
        // write code here
        if (n < 0) {
            return -1;
        }
        if (n == 0) {
            return 1;
        }
        if (n == 1) {
            return 1;
        }
        int[] f = new int[n+1];
        f[0] = 1;
        f[1] = 1;
        for (int i=2; i< f.length; i++) {
            f[i] = (f[i-1] + f[i-2]) % 1000000007;
        }
        return f[n];
    }
}

12.5 矩阵最小路径和练习题
有一个矩阵map，它每个格子有一个权值。从左上角的格子开始每次只能向右或者向下走，最后到达右下角的位置，路径上所有的数字累加起来就是路径和，返回所有的路径中最小的路径和。
给定一个矩阵map及它的行数n和列数m，请返回最小路径和。保证行列数均小于等于100.
测试样例：
[[1,2,3],[1,1,1]],2,3
返回：4
import java.util.*;

public class MinimumPath {
    public int getMin(int[][] map, int n, int m) {
        // write code here
        int[][] dp = map;
        dp[0][0] = map[0][0];
        for (int j=1; j<m; j++) {
            dp[0][j] = map[0][j] + dp[0][j-1];
        }
        for (int i=1; i<n; i++) {
            dp[i][0] = map[i][0] + dp[i-1][0];
        }
        for (int i=1; i<n; i++) {
            for (int j=1; j<m; j++) {
                dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + map[i][j];
            }
        }
        return dp[n-1][m-1];
    }
}

12.6 LIS练习题
这是一个经典的LIS(即最长上升子序列)问题，请设计一个尽量优的解法求出序列的最长上升子序列的长度。
给定一个序列A及它的长度n(长度小于等于500)，请返回LIS的长度。
测试样例：
[1,4,2,5,3],5
返回：3

import java.util.*;

public class LongestIncreasingSubsequence {
    public int getLIS(int[] A, int n) {
        // write code here
        if (A.length != n || n <= 0) {
            return -1;
        }
        //int[] dp = A;注意不能这样赋值，这样做，起始dp，就是A，会改变A的值
        int[] dp = new int[n];
        dp[0] = 1;
        for (int i=1; i<n; i++) {
            int max = Integer.MIN_VALUE;
            int k = i - 1;
            while (k >= 0) {
                if (A[k] < A[i]) {
                   if (max < dp[k] + 1) {
                      max = dp[k] + 1;
                   } 
                }
                k--;
            }
            if (max == Integer.MIN_VALUE) {
                max = 1;
            }
            dp[i] = max;
        }
        
        int max = Integer.MIN_VALUE;
        for(int i=0; i<n; i++) {
            if (max < dp[i]) {
                max = dp[i];
            }
        }
        return max;
    }
}
