题目描述

输入一个链表，从尾到头打印链表每个节点的值。 
输入描述:
输入为链表的表头


输出描述:
输出为需要打印的“新链表”的表头

import java.util.*;//注意包的引入
public class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {//注意返回值
        LinkedList<Integer> list = new LinkedList<Integer>();
        ArrayList<Integer> result = new ArrayList<Integer>();
        if (listNode == null) {
            return result;//注意要是空的，也应该返回空的list。还有注意返回值
        }
        ListNode p = listNode;
        while (p != null) {
            list.add(p.val);
            p = p.next;
        }
        for (int n=list.size()-1; n>=0; n--) {
            result.add(list.get(n));
        }
        return result;
    }
}

2.链表中倒数第k个结点
/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class Solution {
    public ListNode FindKthToTail(ListNode head,int k) {//注意两个输入参数都要判断的，先写这个
		ListNode p = head;
        if (head == null) {
            return head;
        }
        if (k == 0) {
            return null;
        }
        for (int i=0; i<k-1; i++) {
            p = p.next;
            if (p == null) {
                return null;
            }
        }
        ListNode result = head;
        while (p.next != null) {
            p = p.next;
            result = result.next;
        }
        return result;
    }
}

3.反转链表
题目描述

输入一个链表，反转链表后，输出链表的所有元素。

/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
import java.util.*;
    
public class Solution {
    public ListNode ReverseList(ListNode head) {
        if (head == null) {
            return head;
        }
    	Stack<ListNode> stack = new Stack<ListNode>();
        ListNode p = head;
        while (p != null) {
            stack.push(p);
            p = p.next;
        }
        return creatList(stack);
    }
    
    public ListNode creatList(Stack<ListNode> stack) {
        if (stack.empty()) {
            return null;
        }
        
        ListNode head = stack.pop();
        head.next = creatList(stack);
        return head;
    }
}

4.合并两个排序的链表
题目描述

输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。
/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class Solution {
    public ListNode Merge(ListNode list1,ListNode list2) {
        if (list1 == null) {
            return list2;
        }
        if (list2 == null) {
            return list1;
        }
        if (list1.val < list2.val) {
            list1.next = Merge(list1.next, list2);
            return list1;
        }  else {
            list2.next = Merge(list1, list2.next);
            return list2;
        }
    }
}

5.二叉树的镜像
题目描述

操作给定的二叉树，将其变换为源二叉树的镜像。 
输入描述:
二叉树的镜像定义：源二叉树 
    	    8
    	   /  \
    	  6   10
    	 / \  / \
    	5  7 9 11
    	镜像二叉树
    	    8
    	   /  \
    	  10   6
    	 / \  / \
    	11 9 7  5
/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public void Mirror(TreeNode root) {
        if (root == null) {
            return ;
        }
        TreeNode tmp = root.right;
        root.right = root.left;
        root.left = tmp;
        Mirror(root.left);
        Mirror(root.right);
    }
}
