4.2 可查询最值的栈练习题
定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。
import java.util.Stack;

public class Solution {
    
    private Stack<Integer> dataStack = new Stack<Integer>();//通常意义上的栈，泛型需要是个引用（错误1）
    private Stack<Integer> minStack = new Stack<Integer>();//存放datastack上对应位置的最小值
    
    public void push(int node) {
    	if (dataStack.empty()) {           
            minStack.push(node);
        } else {
            if (node < minStack.peek()) {
                minStack.push(node);
            } else {
                minStack.push(minStack.peek());
            }
        }
        dataStack.push(node);
    }
    
    public void pop() {
        if(dataStack.empty()) {
            throw new RuntimeException("Your stack is empty");//这种不正常的情况还是抛出异常比较好（错误二）
        } else {
            dataStack.pop();
            minStack.pop();
        }
    }
    
    public int top() {
        if (dataStack.empty()) {
            throw new RuntimeException("Your stack is empty");
        } else {
            return dataStack.peek();//忘记return了（错误三）
        }
    }
    
    public int min() {
        if (dataStack.empty()) {
            throw new RuntimeException("Your stack is empty");
        } else {
            return minStack.peek();
        }
    }
}

4.4 双栈队列练习题
编写一个类,只能用两个栈结构实现队列,支持队列的基本操作(push，pop)。
给定一个操作序列ope及它的长度n，其中元素为正数代表push操作，为0代表pop操作，保证操作序列合法且一定含pop操作，请返回pop的结果序列。
测试样例：
[1,2,3,0,4,0],6
返回：[1,2]

import java.util.*;

public class TwoStack {

    private Stack<Integer> inStack = new Stack<Integer>();
    private Stack<Integer> outStack = new Stack<Integer>();
    
    public int[] twoStack(int[] ope, int n) {
        // write code here
        if (ope.length != n || n <= 0) {
            throw new RuntimeException("input is error.");
        }
        
        List<Integer> list = new LinkedList<Integer>();//存放pop出来的数据
        
        for(int i=0; i<n; i++) {
            if (ope[i] > 0) {
                inStack.push(ope[i]);
            } else {
                if (outStack.empty()) {//要是空的，首先要把入栈队列中的所有数据push进来
                    int tmp;
                    while (!inStack.empty()) {//要一次性的全入栈，不然顺序变了
                        tmp = inStack.pop();
                        outStack.push(tmp);
                    }
                }
                list.add(outStack.pop());//要是不为空，就必须先pop out里的，不然顺序也变了。
            }
        }
        int num = list.size();
        int[] result = new int[num];
        for(int i=0; i<num; i++) {
            result[i] = list.get(i);
        }
        return result;
    }
}

4.5 栈的反转练习题
实现一个栈的逆序，但是只能用递归函数和这个栈本身的pop操作来实现，而不能自己申请另外的数据结构。
给定一个整数数组A即为给定的栈，同时给定它的大小n，请返回逆序后的栈。
测试样例：
[4,3,2,1],4
返回：[1,2,3,4]

import java.util.*;

public class StackReverse {
    
    private Stack<Integer> stack = new Stack<Integer>();
    
    public int[] reverseStack(int[] A, int n) {//感觉题目的意思是从左到右，分别对应栈顶和栈低
        // write code here
        for(int i=A.length-1; i>=0; i--) {
            stack.push(A[i]);
        }
        int[] result = new int[n];
        int k = 0;
        while (!stack.empty()) {//这里居然写成了if，愚蠢啊
           result[k++] = getEle(stack); 
        } 
        return result;
    }
    
    public int getEle(Stack<Integer> stack) {//参数也要加上泛型，不然他就找不到类型了（错误1）
    	int tmp = stack.pop();
        if (stack.empty()) {
            return tmp;
        }
        int result = getEle(stack);//拿到子栈最低端的元素
        stack.push(tmp); //并把当前拿到的值，push进栈，保持原有的顺序
        return result;
    }
}

4.6 双栈排序练习题
请编写一个程序，按升序对栈进行排序（即最大元素位于栈顶），要求最多只能使用一个额外的栈存放临时数据，但不得将元素复制到别的数据结构中。
给定一个int[] numbers(C++中为vector<int>)，其中第一个元素为栈顶，请返回排序后的栈。请注意这是一个栈，意味着排序过程中你只能访问到第一个元素。
测试样例：
[1,2,3,4,5]
返回：[5,4,3,2,1]

import java.util.*;

public class TwoStacks {
    public ArrayList<Integer> twoStacksSort(int[] numbers) {
        // write code here
    	if (numbers == null) {
    		throw new RuntimeException("input is null.");
    	}
    	ArrayList<Integer> aList = new ArrayList<Integer>();
    	if (numbers.length == 1) {
    		aList.add(numbers[0]);
    		return aList;
    	}
    	
    	int[] help = new int[numbers.length];
    	int i = 0;//指向numbers的栈顶元素
    	int j = numbers.length - 1;//指向help的栈顶元素
    	int tmp;
    	
    	while (j >= 0) {//j始终指向help中下一次要放的位置
    		tmp = numbers[i++];//i始终指向下一次要取的numbers的栈顶元素
    		if (i == 1 && j == numbers.length - 1) {
    			help[j] = tmp;
    			j--;
    		} else {
    			if (tmp >= help[j + 1]) {//把方向搞错了，应该+的方向（错误一）
    				help[j] = tmp;
    				j--;
    			} else {
    				while (j != numbers.length - 1 && help[j + 1] >  tmp) {//还有判断边界，应该放在最前面（错误二）
    					numbers[i - 1] = help[j + 1];
    					i--;
    					j++;
    				}
    				help[j] = tmp;
    				j--;
    			}
    		}
    	}
    	
    	for (int k=0; k<numbers.length; k++) {
    		aList.add(help[k]);
    	}
    	return aList;
    }
}

4.8 滑动窗口练习题
有一个整型数组 arr 和一个大小为 w 的窗口从数组的最左边滑到最右边,窗口每次向右边滑一个位置。 返回一个长度为n-w+1的数组res，res[i]表示每一种窗口状态下的最大值。 以数组为[4,3,5,4,3,3,6,7]，w=3为例。因为第一个窗口[4,3,5]的最大值为5，第二个窗口[3,5,4]的最大值为5，第三个窗口[5,4,3]的最大值为5。第四个窗口[4,3,3]的最大值为4。第五个窗口[3,3,6]的最大值为6。第六个窗口[3,6,7]的最大值为7。所以最终返回[5,5,5,4,6,7]。
给定整形数组arr及它的大小n，同时给定w，请返回res数组。保证w小于等于n，同时保证数组大小小于等于500。
测试样例：
[4,3,5,4,3,3,6,7],8,3
返回：[5,5,5,4,6,7]

import java.util.*;

public class SlideWindow {
    public int[] slide(int[] arr, int n, int w) {
        // write code here
        if (arr.length != n || w > n) {
            throw new RuntimeException("input is error");
        }
        LinkedList<Integer> list = new LinkedList<Integer>();
        int[] result = new int[n-w+1];
        int k = 0;
        for(int i=0; i<n; i++) {
            //最好在做题时，想好几个case，验证
            if (list.size() != 0 && list.peekFirst() <= i-w) {//在最开始的时候，就应该判断队头元素是否无效，无效的话，删除
                list.pollFirst();//这两个判断条件，是有先后顺序的。
            }
            if (list.size() == 0) {//队列为空，直接入队列
                list.addLast(i);
            } 
            if (arr[list.peekLast()] > arr[i]) {//如果这个元素比队尾的元素小，这个元素的下标入队列
                list.addLast(i);
            } else {//如果这个元素比队尾元素大，把队尾元素弹出，知道比当前元素大
                while (list.size() != 0 && arr[list.peekLast()] <= arr[i]) {
               		list.pollLast(); 
            	}
                list.addLast(i);//移除，忘记填进去了（错误1）
            } 
            if (i >= w-1) {
                result[k++] = arr[list.peekFirst()];
            }
        }
        return result;
    }
}
