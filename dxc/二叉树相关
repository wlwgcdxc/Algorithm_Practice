7.2 递归二叉树的序列打印练习题
请用递归方式实现二叉树的先序、中序和后序的遍历打印。
给定一个二叉树的根结点root，请依次返回二叉树的先序，中序和后续遍历(二维数组的形式)。

import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/
public class TreeToSequence {
    public int[][] convert(TreeNode root) {
        // write code here
        if (root == null) {
            return null;
        }
        int[][] result = new int[3][];
        List<Integer> preList = new LinkedList<Integer>();
        List<Integer> midList = new LinkedList<Integer>();
        List<Integer> aftList = new LinkedList<Integer>();
        preSer(root, preList);
        midSer(root, midList);
        aftSer(root, aftList); 
        int n = preList.size();
        result[0] = new int[n];
        result[1] = new int[n];
        result[2] = new int[n];
        for(int i=0; i<n; i++) {
            result[0][i] = preList.get(i);
            result[1][i] = midList.get(i);
            result[2][i] = aftList.get(i);
        }
        return result;
    }
    
    public void preSer(TreeNode root, List<Integer> list) {//先序,确实已参数形式传进去，会好做些   
        if (root == null) {
            return ;
        }
        list.add(root.val);
        preSer(root.left, list);
        preSer(root.right, list);
    }
    
    public void midSer(TreeNode root, List<Integer> list) {//中序,确实已参数形式传进去，会好做些   
        if (root == null) {
            return ;
        }
        midSer(root.left, list);
        list.add(root.val);
        midSer(root.right, list);
    }
    
    public void aftSer(TreeNode root, List<Integer> list) {//后序,确实已参数形式传进去，会好做些   
        if (root == null) {
            return ;
        }
        aftSer(root.left, list);
        aftSer(root.right, list);
        list.add(root.val);
    }
}

7.3 非递归二叉树的序列打印练习题
请用非递归方式实现二叉树的先序、中序和后序的遍历打印。
给定一个二叉树的根结点root，请依次返回二叉树的先序，中序和后续遍历(二维数组的形式)。
import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/

//到目前为止，树的这种递归写成递推已经相当擅长了
class NodeRecord {//记录节点的左右孩子，是否进栈
  int state;
  TreeNode node;
      public NodeRecord(TreeNode node, int state) {
          this.state = state;
          this.node = node;
      }
}


public class TreeToSequence {    
    
    public int[][] convert(TreeNode root) {
        // write code here
        if (root == null) {
            return null;
        }
        
        int[][] result = new int[3][];
        result[0] = preSer(root);
        result[1] = midSer(root);
        result[2] = aftSer(root);
        return result;
    }
    
    public int[] preSer(TreeNode root) {//先序
        Stack<NodeRecord> stack = new Stack<NodeRecord>();
        List<Integer> list = new LinkedList<Integer>();
        NodeRecord p = new NodeRecord(root, 0);
        list.add(p.node.val);
        stack.push(p);
        while (!stack.empty()) {
            p = stack.peek();
            if (p.state == 0) {//说明只放了他
                if (p.node.left != null) {//先放左孩子
                    p.state = 1;
                    list.add(p.node.left.val);
                    stack.push(new NodeRecord(p.node.left, 0));
                } else if (p.node.right != null) {//左孩子，为空就直接放右孩子
                    p.state = 2;
                    list.add(p.node.right.val);
                    stack.push(new NodeRecord(p.node.right, 0));
                } else {
                    stack.pop();
                }
            } else if (p.state == 1) {//说明左孩子，已经放过了
                if (p.node.right != null) {
                    p.state = 2;
                    list.add(p.node.right.val);
                    stack.push(new NodeRecord(p.node.right, 0));
                } else {//要是右孩子，也没有了，就直接pop(错误1)，编的时候，就把if的所有情况想到，全集
                    stack.pop();
                }
            } else {//状态为2，说明右孩子，也放过了
                stack.pop();
            }
        }
        int result[] = new int[list.size()];
        for (int i=0; i<list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;
    }
    
    public int[] midSer(TreeNode root) {//中序,每个状态的，还是交相应的状态去处理，不要提前处理了，否则有可能看晕
        Stack<NodeRecord> stack = new Stack<NodeRecord>();
        List<Integer> list = new LinkedList<Integer>();
        NodeRecord p = new NodeRecord(root, 0);
        stack.push(p);
        while (!stack.empty()) {
            p = stack.peek();
            if (p.state == 0) {//新加进去的，要依次加左孩子和右孩子
               if (p.node.left != null) {
                   p.state = 1;
                   stack.push(new NodeRecord(p.node.left, 0));
               } else if (p.node.right != null) {
                   p.state = 1;
               } else {
                   list.add(p.node.val);
                   stack.pop();
               }
            } else if (p.state == 1) {
                p.state = 2;
                list.add(p.node.val);
                if (p.node.right != null) {
                    stack.push(new NodeRecord(p.node.right, 0));
                } else {
                    stack.pop();
                }
            } else {
                stack.pop();
            }
        }
        int[] result = new int[list.size()];
        for (int i=0; i<list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;
     }
    
    public int[] aftSer(TreeNode root) {//后序   
        Stack<NodeRecord> stack = new Stack<NodeRecord>();
        List<Integer> list = new LinkedList<Integer>();
        NodeRecord p = new NodeRecord(root, 0);
        stack.push(p);
        
        while (!stack.empty()) {
            p = stack.peek();
            if (p.state == 0) {
                if (p.node.left != null) {
                    p.state = 1;
                    stack.push(new NodeRecord(p.node.left, 0));
                } else if (p.node.right != null){
                    p.state = 2;
                    stack.push(new NodeRecord(p.node.right, 0));
                } else {
                    p.state = 2;
                }
            } else if (p.state == 1) {
                if (p.node.right != null) {
                    p.state = 2;
                    stack.push(new NodeRecord(p.node.right, 0));
                } else {
                    p.state = 2;
                }
            } else {
                list.add(p.node.val);
                stack.pop();
            }
        }
        
        int[] result = new int[list.size()];
        for (int i=0; i<result.length; i++) {
            result[i] = list.get(i);
        }
        return result;
    }
    
}


7.6 二叉树的序列化练习题
首先我们介绍二叉树先序序列化的方式，假设序列化的结果字符串为str，初始时str等于空字符串。先序遍历二叉树，如果遇到空节点，就在str的末尾加上“#!”，“#”表示这个节点为空，节点值不存在，当然你也可以用其他的特殊字符，“!”表示一个值的结束。如果遇到不为空的节点，假设节点值为3，就在str的末尾加上“3!”。现在请你实现树的先序序列化。
给定树的根结点root，请返回二叉树序列化后的字符串。
测试样例：

import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/
public class TreeToString {
    public String toString(TreeNode root) {
        // write code here
        if (root == null) {
            return "#!";
        }
        return preSer(root);
    }
    
    public String preSer(TreeNode root) {
        if (root == null) {
            return "#!";
        } else {
            return root.val + "!" + preSer(root.left) + preSer(root.right);
        }
    }
}

7.8 平衡二叉树判断练习题
下一题
有一棵二叉树，请设计一个算法判断这棵二叉树是否为平衡二叉树。
给定二叉树的根结点root，请返回一个bool值，代表这棵树是否为平衡二叉树。

import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/
public class CheckBalance {
    public boolean check(TreeNode root) {
        // write code here
        if (root == null) {
            return true;
        }
        
        int[] result =  checkBalance(root);
        if (result[0] == 0) {
            return false;
        } else {
            return true;
        }
    }
    
    public int[] checkBalance(TreeNode root) {//也可以直接返回int， -1表示不是平衡二叉树，其他值表示是，且表示其高度
        int[] result = new int[2];//第一个元素表示是否为平衡二叉树，第二个元素表示树的高度
        if (root == null) {
            result[0] = 1;
            result[1] = 0;
            return result;
        }
        int[] left = checkBalance(root.left);
        int[] right = checkBalance(root.right);
        if (left[0] == 0 || right[0] == 0 || Math.abs(left[1] - right[1]) > 1) {
            result[0] = 0;
            return result;
        } else {
            result[0] = 1;
            result[1] = Math.max(left[1], right[1]) + 1;
            return result;
        }
    }
}

7.9 完全二叉树判断练习题
有一棵二叉树,请设计一个算法判断它是否是完全二叉树。
给定二叉树的根结点root，请返回一个bool值代表它是否为完全二叉树。树的结点个数小于等于500。
import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/
public class CheckCompletion {
    public boolean chk(TreeNode root) {
        // write code here
        if (root == null) {
            return true;
        }
        boolean flag = false;//判断是不是快到叶子节点了
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.addLast(root);
        while (queue.size() != 0) {
            TreeNode t = queue.pollFirst();
            if (flag == true) {//要是后面都应该是叶子节点了
                if (t.left != null || t.right != null) {
                    return false;
                } else {
                    continue;
                }
            } else {
                if (t.right != null && t.left == null) {//要是有右孩子，没有左孩子，肯定就不是完全二叉树
                    return false;
                }
                if (t.right == null && t.left == null) {
                    flag = true;
                    continue;
                } else {
                    queue.addLast(t.left);
                    if (t.right == null) {
                        continue;
                    } else {
                        queue.addLast(t.right);
                    }
                }
            }
        }
        return true;
    }
}

7.5 二叉树的打印练习题
有一棵二叉树，请设计一个算法，按照层次打印这棵二叉树。
给定二叉树的根结点root，请返回打印结果，结果按照每一层一个数组进行储存，所有数组的顺序按照层数从上往下，且每一层的数组内元素按照从左往右排列。保证结点数小于等于500。

import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/
public class TreePrinter {
    public int[][] printTree(TreeNode root) {
        // write code here
        if (root == null) {
            return null;
        }
        List<List<Integer>> listAll = new LinkedList<List<Integer>>();
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();//要用队列的这些方法，只在LinkedList里，List里没有
        TreeNode last = root;//当前行的最右元素，更新last的时候，实际当前行才开始打印
        TreeNode nlast = null;//记录下下一行最右元素
        queue.addLast(root);
        List<Integer> list = new LinkedList<Integer>();
        while (queue.size() != 0) {
            TreeNode tmp = queue.pollFirst();
            list.add(tmp.val);
            if (tmp.left != null) {
                nlast = tmp.left;
                queue.addLast(tmp.left);
            }
            if (tmp.right != null) {
                nlast = tmp.right;//记录新加进去的最右元素
                queue.addLast(tmp.right);
            }
            if (tmp == last) {//表示当前行已经扫描到最后一个元素了，将整个list加到listAll里，并last指向下一行最后一个元素，从刚开始的元素向里加
                listAll.add(list);
                list = new LinkedList<Integer>();
                last = nlast;
            }
        }
        int[][] result = new int[listAll.size()][];
        for (int i=0; i<result.length; i++) {
            result[i] = new int[listAll.get(i).size()];
            for (int j=0; j<result[i].length; j++) {
                result[i][j] = listAll.get(i).get(j);
            }
        }
        return result;
    }
}

7.11 折纸练习题
请把纸条竖着放在桌⼦上，然后从纸条的下边向上⽅对折，压出折痕后再展 开。此时有1条折痕，突起的⽅向指向纸条的背⾯，这条折痕叫做“下”折痕 ；突起的⽅向指向纸条正⾯的折痕叫做“上”折痕。如果每次都从下边向上⽅ 对折，对折N次。请从上到下计算出所有折痕的⽅向。
给定折的次数n,请返回从上到下的折痕的数组，若为下折痕则对应元素为"down",若为上折痕则为"up".
测试样例：
1
返回：["down"]

import java.util.*;

public class FoldPaper {
    class TreeNode {
        String val = null;
        TreeNode left = null;
        TreeNode right = null;
        
        public TreeNode(String val) {
            this.val = val;
        }
    }
    
    public String[] foldPaper(int n) {
        // write code here
        if (n <= 0) {
            return null;
        }
        
        TreeNode root = new TreeNode("down");
        creatTree(n, root);
        List<String> list = midSer(root);
        String[] result = new String[list.size()];
        for (int i=0; i<list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;
    }
    
    public void creatTree(int n, TreeNode node) {
        if (n <= 1) {
            return ;
        }
        TreeNode left = new TreeNode("down");
        TreeNode right = new TreeNode("up");
        node.left = left;
        node.right = right;
        
        creatTree(n-1, left);
        creatTree(n-1, right);
    }
    
    public List<String> midSer(TreeNode root) {
        if (root == null) {
            return null;
        }
        List<String> listLeft = midSer(root.left);
        List<String> listRight = midSer(root.right);
        List<String> list = new LinkedList<String>();
        if (listLeft != null) {//错误1，本来就感觉只返回null，有点奇怪
            list.addAll(listLeft);
        }
        list.add(root.val);
        if (listRight != null) {
            list.addAll(listRight);
        }
        return list;
    }
}

7.12 寻找错误结点练习题
一棵二叉树原本是搜索二叉树，但是其中有两个节点调换了位置，使得这棵二叉树不再是搜索二叉树，请找到这两个错误节点并返回他们的值。保证二叉树中结点的值各不相同。
给定一棵树的根结点，请返回两个调换了位置的值，其中小的值在前。

import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/
public class FindErrorNode {
    public int[] findError(TreeNode root) {
        // write code here
        if (root == null) {
            return null;
        }
        
        List<Integer> list = midSer(root);
        int[] arr = new int[list.size()];
        for (int i=0; i<arr.length; i++) {
            arr[i] = list.get(i);
        }
        
        return getPro(arr);
    }
    
    public List<Integer> midSer(TreeNode root) {
        if (root == null) {
            return null;
        }
        List<Integer> listLeft= midSer(root.left);
        List<Integer> listRight = midSer(root.right);
        List<Integer> list= new LinkedList<Integer>();//容器的初始化，老是写错，注意
        if (listLeft != null) {
            list.addAll(listLeft);
        }
        list.add(root.val);
        if (listRight != null) {
            list.addAll(listRight);
        }
        return list;
    }
    
    public int[] getPro(int[] arr) {
        int index1 = -1;//返回第一个位置不对的地方
        int index2 = -1;//返回第二个
        int[] result = new int[2];
        
        for (int i=0; i<arr.length-1; i++) {
            if (arr[i] > arr[i+1]) {
                if (index1 == -1) {
                    index1 = i;
                } else {
                    index2 = i;
                }
            }
        }
        
        if (index2 != -1) {
            result[0] = arr[index2+1];
            result[1] = arr[index1];
        } else {
            result[0] = arr[index1+1];
            result[1] = arr[index1];
        }
        return result;
    }
}

7.13 树上最远距离练习题
从二叉树的节点A出发，可以向上或者向下走，但沿途的节点只能经过一次，当到达节点B时，路径上的节点数叫作A到B的距离。对于给定的一棵二叉树，求整棵树上节点间的最大距离。
给定一个二叉树的头结点root，请返回最大距离。保证点数大于等于2小于等于500.
import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/
public class LongestDistance {
    public int findLongest(TreeNode root) {
        // write code here
        if (root == null) {
            return -1;
        }
        int[] result = getLongest(root);
        return result[1];
    }
    
    public int[] getLongest(TreeNode root) {
        int[] result = new int[2];//第一个元素返回高度，第二个元素返回最大距离
        if (root == null) {//初始化的，应该就是0
            return result;
        }
        int[] left = getLongest(root.left);
        int[] right = getLongest(root.right);
        result[0] = Math.max(left[0], right[0]) + 1;
        result[1] = Math.max(Math.max(left[1], right[1]), left[0]+right[0]+1);
        return result;
    }
}
