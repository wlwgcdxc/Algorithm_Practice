3.2 拓扑结构相同子树练习题

对于两棵彼此独立的二叉树A和B，请编写一个高效算法，检查A中是否存在一棵子树与B树的拓扑结构完全相同。
给定两棵二叉树的头结点A和B，请返回一个bool值，代表A中是否存在一棵同构于B的子树。

思路：先得到两颗树的中序遍历序列，再使用KMP算法进行字符串的匹配

import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;
    public TreeNode(int val) {
        this.val = val;
    }
}*/
public class IdenticalTree {
    public boolean chkIdentical(TreeNode A, TreeNode B) {
        // write code here
        if (A == null || B == null) {
    		return false;
    	}
    	
    	String up = getMiddleSeri(A);
    	String down = getMiddleSeri(B);
    	return isChildStr(up, down);
    }
    
      public boolean isChildStr(String up, String down) { //KMP
    	if (up.length() == 0 || down.length() == 0) {
    		return false;
    	}
    	int[] next = getNext(down);
    	int i = 0;
    	int j = 0;
    	while (j < down.length()) {
    		if (i >= up.length()) {
    			return false;
    		}
    		if (up.charAt(i) == down.charAt(j)) {
        		i++;
        		j++;
        		continue;
        	} else {
        		if (next[j] == 0) {
        			i++;
        			j = 0;
        			continue;
        		} else {
        			j = next[j] - 1;
        		}
        	}
    	}
    	return true;
    } 
    
    public static int[] getNext(String str) {
    	int[] next = new int[str.length()];
    	if (str.length() == 1) {
    		next[0] = 0;
    	} else{
    		next[0] = 0;
    		next[1] = 1;
    		for (int i=2; i<str.length(); i++) {
    			int k = i - 1;//算最大的前缀k
        		while (k >= 1) {
        			for (int m=0; m<k; m++) {
        				if (str.charAt(m) == str.charAt(i-k+m)) {
        					if (m == k - 1) {//遍历完都相等，说明已经找到了
        	    				next[i] = k + 1;
        					} else {
            					continue;//否则继续，遍历
        					}
        				} else {//要是遍历中断，找更小的K值
        					break;
        				}
        			}
        			if (next[i] != 0) {//next[i]不为0了，说明已经找到了K值了，直接break
        				break;
        			}
        			k--;
        		}
        		if (next[i] == 0) {//没找到对应k值得，直接换成1
        			next[i] = 1;
        		}	
    		}
    	}
    	return next;
    }
    
    public String getMiddleSeri(TreeNode A) {
    	if (A == null) {
    		return "#!";
    	}
    	String root = A.val + "!";
    	String left = getMiddleSeri(A.left);
    	String right = getMiddleSeri(A.right);
    	return root + left + right;
    }
  }
  
  
  
3.3 词语变形练习题
对于两个字符串A和B，如果A和B中出现的字符种类相同且每种字符出现的次数相同，则A和B互为变形词，请设计一个高效算法，检查两给定串是否互为变形词。
给定两个字符串A和B及他们的长度，请返回一个bool值，代表他们是否互为变形词。

import java.util.*;

public class Transform {
    public boolean chkTransform(String A, int lena, String B, int lenb) {
        // write code here
    	if (A == null || B == null || lena != lenb) {
    		return false;
    	}
    	int[] record = new int[256];
    	for (int i=0; i<lena; i++) {
    		record[A.charAt(i)]++;
    	}
    	for (int j=0; j<lenb; j++) {
    		//不符合情况的只有两种情况
    		//case 1:当B中出现新的字符时
    		//case 2:当B中出现的是A的子集时，必有一个字符会比他在A中出现的次数多
    		if (record[B.charAt(j)]-- == 0) {
    			return false;
    		}
    	}
    	return true;
    }
}

3.5 两串旋转练习题
如果对于一个字符串A，将A的前面任意一部分挪到后边去形成的字符串称为A的旋转词。比如A="12345",A的旋转词有"12345","23451","34512","45123"和"51234"。对于两个字符串A和B，请判断A和B是否互为旋转词。
给定两个字符串A和B及他们的长度lena，lenb，请返回一个bool值，代表他们是否互为旋转词。
测试样例：
"cdab",4,"abcd",4
返回：true

import java.util.*;

public class Rotation {
	
	public static void main(String[] args) {
		String up = new String("babcbabcabcaabcabcabcacabc");
		String B = new String("abcabcacab");
		
		System.out.println(isChildStr(up, B));
		
	}
	
    public static boolean chkRotation(String A, int lena, String B, int lenb) {
        // write code here
    	if (A == null || B == null || lena != lenb) {
    		return false;
    	}
    	String up = A + A;
    	return isChildStr(up, B);
    }
    
    public static boolean isChildStr(String up, String down) {//KMP
    	int[] next = getNext(down);
    	int i = 0;
    	int j = 0;
    	while (j < down.length()) {
    		if (i >= up.length()) {
    			return false;
    		}
    		if (up.charAt(i) == down.charAt(j)) {
        		i++;
        		j++;
        		continue;
        	} else { 
        		if (next[j] == 0) {
        			j = 0;
        			i++;
        			continue;
        		} else {
        			j = next[j] - 1;
        		}
        		
        	}
    	}
    	return true;
    }
    
    public static int[] getNext(String str) {
    	int[] next = new int[str.length()];
    	if (str.length() == 1) {
    		next[0] = 0;
    	} else {
    		next[0] = 0;
    		next[1] = 1;
    		for (int i=2; i<str.length(); i++) {
    			int k = i - 1;
    			while (k >= 1) {
    				for (int m=0; m<k; m++) {
            			if (str.charAt(m) == str.charAt(i-k+m)) {
            				if (m == k-1) {
            					next[i] = k + 1;
            					break;
            				}
                			continue;
                		} else {
                			k--;
                			break;
                		}
            		}
            		if (next[i] != 0) {
            			break;
            		}
    			}
    			if (next[i] == 0) {
        			next[i] = 1;
        		}
    		}
    	}
    	return next;
    }
}

3.6 句子的逆序练习题
对于一个字符串，请设计一个算法，只在字符串的单词间做逆序调整，也就是说，字符串由一些由空格分隔的部分组成，你需要将这些部分逆序。
给定一个原字符串A和他的长度，请返回逆序后的字符串。
测试样例：
"dog loves pig",13
返回："pig loves dog"

//对格式要求还是不是很严格，机试的时候，先别想很边缘的特殊case，简单的判断下边界就可以了。要是不通过，再做更精细的控制
import java.util.*;

public class Reverse {
	public String reverseSentence(String A, int n) {
       // write code here
		if (A.length() != n || A == null || n <=0) {
			return "ERROR";
		}
		StringBuffer result = new StringBuffer(A);
		convertStr(result, 0, n-1);//先把整体的字符串反转下
		int[] blank = findBlank(result);//存储空格对应的下标
		int i = 0;
		int k;
		for(k=0; blank[k] != -1; k++) {
			convertStr(result, i, blank[k]-1);
			i = blank[k] + 1;
		}
		convertStr(result, blank[k-1]+1, n-1);
		return result.toString();		
    }
	
	public static StringBuffer convertStr(StringBuffer str, int begin, int end) {//end包括最后的字符
		if (begin == end) {
			return str;
		}
		int k = (end - begin) / 2;
		for(int i=0; i<=k; i++) {
			char tmp = str.charAt(begin+i);
			str.setCharAt(begin+i, str.charAt(end-i));
			str.setCharAt(end-i, tmp);
		}
		return str;
	}
	
	public static int[] findBlank(StringBuffer str) {
		int[] blank = new int[str.length()];
		int k = 0;
		for (int i=0; i<str.length(); i++) {
			if (str.charAt(i) == ' ') {
				blank[k++] = i;
			}
		}
		blank[k] = -1;
		return blank;
	}
}

3.8 拼接最小字典序练习题
对于一个给定的字符串数组，请找到一种拼接顺序，使所有小字符串拼接成的大字符串是所有可能的拼接中字典序最小的。
给定一个字符串数组strs，同时给定它的大小，请返回拼接成的串。
测试样例：
["abc","de"],2
"abcde"

import java.util.*;

public class Prior {
    public String findSmallest(String[] strs, int n) {
        // write code here
    	if (strs.length != n || n <= 0) {
    		return "ERROR";
    	}
    	Arrays.sort(strs,new MyComparator());//这个函数的返回值是void,内部实现应该是个原地排序，strs存储的就是排序后的结果
    	String result = "";
    	for (int i=0; i<strs.length; i++)
    		result = result + strs[i];
    	return result;
    }
    
    public class MyComparator implements Comparator<String> {
    	public int compare(String a, String b) {
    		return (a + b).compareTo(b + a);//字符串的这个函数本来就会按照字典序比较字符串
    	}
    }
}

