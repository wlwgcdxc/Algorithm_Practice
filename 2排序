1.对于一个int数组，请编写一个冒泡排序算法，对数组元素排序。
给定一个int数组A及数组的大小n，请返回排序后的数组。 
测试样例：
[1,2,3,5,2,3],6
[1,2,2,3,3,5]

import java.util.*;

public class BubbleSort {
    public int[] bubbleSort(int[] A, int n) {
        // write code here
        for(int i=n-2; i>=0; i--) {
            for(int j=0; j<=i; j++) {
                compare(A, j, j+1);
            }
        }
        return A;
    }
    
    public int[] compare(int[] A, int i, int j) {
        if (A[i] > A[j]) {
            int temp = A[i];
            A[i] = A[j];
            A[j] = temp;
        }
        return A;
    }
}


2.对于一个int数组，请编写一个选择排序算法，对数组元素排序。
给定一个int数组A及数组的大小n，请返回排序后的数组。
测试样例：
[1,2,3,5,2,3],6
[1,2,2,3,3,5]

import java.util.*;

public class SelectionSort {
    public int[] selectionSort(int[] A, int n) {
        // write code here
        if (n <= 0) {
           return null; 
        }         
        for (int i=0; i<=n-2; i++) {
            int index = selectMin(A, i);
            int temp = A[i];
            A[i] = A[index];
            A[index] = temp;
        }
        return A;
    }
    
    public int selectMin(int[] A, int i) {
        int min = Integer.MAX_VALUE;//晕，这里当然用最大值
        int index = -1;
        for (int j=i; j<A.length; j++) {//java里数组是个对象，length是他的属性
            if (min > A[j]) {
                min = A[j];
                index = j;
            }
        }
        return index;
    }
}

3.对于一个int数组，请编写一个插入排序算法，对数组元素排序。
给定一个int数组A及数组的大小n，请返回排序后的数组。
测试样例：
[1,2,3,5,2,3],6
[1,2,2,3,3,5]

import java.util.*;

​

public class InsertionSort {

    public int[] insertionSort(int[] A, int n) {

        if (n <= 0) 

            return null;

        if (n == 1)

            return A;

        // write code here

        for(int i=1; i<n; i++) {

            int temp = A[i];

            int j = i - 1;

            while(j >= 0) {

                if (A[j] > temp) {

                    A[j + 1] = A[j];

                    j--;

                    if (j < 0) {//下标--或者++时，一定要判断是否越界

                        A[j + 1] = temp;

                    }

                    continue;

                } else {

                    A[j + 1] = temp;

                    break;

                }                

            }

            

        }

        return A;

    }

}
